
import JSZip from 'jszip';

export interface FileContent {
  path: string;
  content: string;
}

export const createProjectZip = async (files: FileContent[]): Promise<Blob> => {
  const zip = new JSZip();
  
  // Add files to the zip
  files.forEach((file) => {
    const { path, content } = file;
    zip.file(path, content);
  });
  
  // Add package.json if it doesn't exist
  if (!files.some((file) => file.path === 'package.json')) {
    zip.file('package.json', JSON.stringify({
      name: "blossom-ai-generated-project",
      version: "1.0.0",
      description: "Generated by Blossom AI Builder",
      scripts: {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
      },
      dependencies: {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-scripts": "5.0.1"
      },
      devDependencies: {
        "tailwindcss": "^3.3.0"
      },
      browserslist: {
        "production": [
          ">0.2%",
          "not dead",
          "not op_mini all"
        ],
        "development": [
          "last 1 chrome version",
          "last 1 firefox version",
          "last 1 safari version"
        ]
      }
    }, null, 2));
  }
  
  // Add README.md if it doesn't exist
  if (!files.some((file) => file.path === 'README.md')) {
    zip.file('README.md', `# Blossom AI Generated Project

This project was generated with Blossom AI Builder.

## Available Scripts

In the project directory, you can run:

### \`npm start\`

Runs the app in the development mode.
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

### \`npm run build\`

Builds the app for production to the \`build\` folder.
`);
  }
  
  // Add tailwind.config.js if it doesn't exist
  if (!files.some((file) => file.path === 'tailwind.config.js')) {
    zip.file('tailwind.config.js', `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`);
  }
  
  // Generate the zip file
  return await zip.generateAsync({
    type: 'blob'
  });
};
